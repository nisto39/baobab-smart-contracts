/**
 * Script de v√©rification de la construction
 * Ce script v√©rifie que les fichiers essentiels sont pr√©sents et que les correctifs ont √©t√© appliqu√©s
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');
const { execSync } = require('child_process');

console.log('üöÄ D√©marrage de la v√©rification de construction...');

// Chemin vers le r√©pertoire dist
const distPath = path.resolve('./dist');
const assetsPath = path.join(distPath, 'assets');

// V√©rifier que le r√©pertoire dist existe
if (!fs.existsSync(distPath)) {
  console.error('‚ùå √âchec: Le r√©pertoire dist n\'existe pas');
  process.exit(1);
}

// V√©rifier que le r√©pertoire assets existe
if (!fs.existsSync(assetsPath)) {
  console.error('‚ùå √âchec: Le r√©pertoire dist/assets n\'existe pas');
  process.exit(1);
}

// V√©rifier la pr√©sence des fichiers essentiels
console.log('üîç V√©rification des fichiers essentiels...');

const essentialFiles = [
  { 
    name: 'index.html',
    path: path.join(distPath, 'index.html'),
    required: true
  },
  { 
    name: 'main-*.js', 
    glob: path.join(assetsPath, 'main-*.js'),
    required: true
  },
  { 
    name: 'react-deps-*.js',
    glob: path.join(assetsPath, 'react-deps-*.js'),
    required: true
  },
  { 
    name: 'ui-deps-*.js',
    glob: path.join(assetsPath, 'ui-deps-*.js'),
    required: false
  },
  { 
    name: 'common-deps-*.js',
    glob: path.join(assetsPath, 'common-deps-*.js'),
    required: false
  },
  { 
    name: 'other-deps-*.js',
    glob: path.join(assetsPath, 'other-deps-*.js'),
    required: false
  },
  { 
    name: 'enhanced-jsx-shim.js',
    path: path.join(distPath, 'enhanced-jsx-shim.js'),
    required: false
  }
];

let missingRequired = false;

for (const file of essentialFiles) {
  if (file.path) {
    // V√©rification directe du chemin
    if (fs.existsSync(file.path)) {
      console.log(`‚úÖ ${file.name} trouv√©`);
    } else {
      if (file.required) {
        console.error(`‚ùå Fichier requis ${file.name} manquant`);
        missingRequired = true;
      } else {
        console.warn(`‚ö†Ô∏è Fichier optionnel ${file.name} manquant`);
      }
    }
  } else if (file.glob) {
    // V√©rification par glob pattern
    const matches = glob.sync(file.glob);
    if (matches.length > 0) {
      console.log(`‚úÖ ${file.name} trouv√©: ${path.basename(matches[0])}`);
    } else {
      if (file.required) {
        console.error(`‚ùå Fichier requis ${file.name} manquant`);
        missingRequired = true;
      } else {
        console.warn(`‚ö†Ô∏è Fichier optionnel ${file.name} manquant`);
      }
    }
  }
}

if (missingRequired) {
  console.error('‚ùå √âchec: Des fichiers requis sont manquants');
  process.exit(1);
}

// V√©rifier le contenu de l'index.html
console.log('üîç V√©rification du contenu de index.html...');
const indexPath = path.join(distPath, 'index.html');
const indexContent = fs.readFileSync(indexPath, 'utf8');

// V√©rifier la pr√©sence du shim React
if (!indexContent.includes('React = window.React || {}')) {
  console.error('‚ùå Le shim React est manquant dans index.html');
  process.exit(1);
} else {
  console.log('‚úÖ Le shim React est pr√©sent dans index.html');
}

// V√©rifier la pr√©sence du fix jsxDEV
if (!indexContent.includes('jsxDEV')) {
  console.warn('‚ö†Ô∏è La protection jsxDEV pourrait manquer dans index.html');
} else {
  console.log('‚úÖ La protection jsxDEV est pr√©sente dans index.html');
}

// V√©rifier les erreurs "var undefined" dans les fichiers JS
console.log('üîç V√©rification des erreurs "var undefined" dans les fichiers JS...');
const jsFiles = glob.sync(path.join(assetsPath, '*.js'));

let varUndefinedFound = false;

for (const file of jsFiles) {
  const fileName = path.basename(file);
  const content = fs.readFileSync(file, 'utf8');
  
  // Recherche de "var undefined" ou 'var "undefined"'
  if (content.includes('var undefined') || content.includes('var "undefined"') || content.includes("var 'undefined'")) {
    console.error(`‚ùå Probl√®me "var undefined" trouv√© dans ${fileName}`);
    varUndefinedFound = true;
  }
}

if (varUndefinedFound) {
  console.error('‚ùå Des probl√®mes "var undefined" ont √©t√© trouv√©s, des correctifs suppl√©mentaires sont n√©cessaires');
  process.exit(1);
} else {
  console.log('‚úÖ Aucun probl√®me "var undefined" trouv√© dans les fichiers JS');
}

// V√©rifier que l'application d√©marre sans erreur
console.log('üîç V√©rification du d√©marrage de l\'application...');

try {
  // D√©marrer un serveur en arri√®re-plan
  console.log('‚è≥ D√©marrage d\'un serveur statique pour tester l\'application...');
  
  // Chercher un port libre
  let port = 5173;
  let serverRunning = false;
  
  // Essayer npx serve si disponible
  try {
    console.log(`‚è≥ Tentative de d√©marrage du serveur sur le port ${port}...`);
    // D√©marrer en arri√®re-plan et capturer seulement stderr
    const serveProcess = execSync(`npx serve -s dist -l ${port} > /dev/null 2>&1 &`);
    console.log(`‚úÖ Serveur d√©marr√© sur le port ${port}`);
    serverRunning = true;
  } catch (error) {
    console.warn(`‚ö†Ô∏è Impossible de d√©marrer le serveur: ${error.message}`);
    console.log('‚è≥ V√©rification statique uniquement...');
  }
  
  // V√©rification statique compl√®te
  console.log('‚úÖ V√©rification de la construction r√©ussie!');
  console.log('üì¶ Vous pouvez d√©ployer cette construction en toute s√©curit√©');
  
  // Arr√™ter le serveur si n√©cessaire
  if (serverRunning) {
    try {
      execSync(`pkill -f "serve -s dist"`);
    } catch (error) {
      // Ignorer les erreurs lors de l'arr√™t du serveur
    }
  }
  
  process.exit(0);
} catch (error) {
  console.error(`‚ùå √âchec de la v√©rification: ${error.message}`);
  process.exit(1);
} 